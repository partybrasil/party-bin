# üëá PROMPT MAESTRO PARA COPILOT ‚Äì PARTYBIN

"""
üìå CONTEXTO DEL PROYECTO:

Este repositorio contiene PartyBin, una aplicaci√≥n web desarrollada en Python con Flask, dise√±ada como un clon personalizado de Rentry.org, pero con muchas funciones avanzadas a√±adidas.

üß† TU TAREA (GitHub Copilot + Visual Studio Code):

Lee cuidadosamente el archivo README.md de este repositorio.
A partir de la descripci√≥n completa all√≠ incluida, **genera la estructura de carpetas, archivos y l√≥gica necesaria** para que PartyBin funcione exactamente como se especifica, sin a√±adir ni omitir funcionalidades.

‚úÖ FUNCIONALIDADES CLAVE A RESPETAR:

- Crear y editar pastes en texto plano, Markdown o c√≥digo con resaltado de sintaxis (auto o definido).
- URLs personalizadas o aleatorias al crear pastes.
- Expiraci√≥n autom√°tica por tiempo/fecha o por n√∫mero de vistas.
- Protecci√≥n con contrase√±a (edici√≥n y/o visualizaci√≥n).
- Firma opcional, contador de palabras, tags, y metadatos.
- Temas visuales seleccionables (claro, oscuro, hacker).
- Dashboard local sin login, acceso por clave secreta.
- Exportaci√≥n y visualizaci√≥n raw/copia/Qr/descarga.
- Estructura modular y liviana, con m√≠nimo consumo de recursos.
- Capacidad de funcionar tanto en local como en Render.com.
- Pastes locales y online est√°n desacoplados por seguridad.

üìÅ TU OBJETIVO:

1. Crea la estructura b√°sica: `app.py`, `templates/`, `static/`, `data/pastes/`, etc.
2. Implementa la l√≥gica del servidor y renderizado en Flask.
3. Usa Markdown2, Pygments, Jinja2, y otras libs necesarias.
4. Aseg√∫rate de que cada componente del README.md se refleje en el c√≥digo.
5. La prioridad es **modularidad, legibilidad y precisi√≥n funcional**.

üí° Recuerda:
- El README.md ya lo define todo. **No inventes ni asumas cosas fuera del documento.**
- Mant√©n el c√≥digo limpio y bien comentado. Usa funciones reutilizables y evita duplicar l√≥gica.

üîö Una vez que completes la implementaci√≥n inicial, prepara endpoints bien definidos, protecci√≥n de rutas, carga/guardado en archivos `.json`, y asegura que todo funcione tanto online como en ejecuci√≥n local.

Gracias, Copilot.
"""

# Comienza por definir la estructura inicial de Flask con los primeros endpoints y funciones clave.
# --- INICIO DE PARTYBIN ---
from flask import Flask, render_template, request, redirect, url_for, flash
import os

# Configuraci√≥n b√°sica
app = Flask(__name__)
app.secret_key = os.environ.get('PARTYBIN_SECRET', 'partybin_default_secret')

# Rutas principales
@app.route('/')
def index():
	return render_template('create.html')

@app.route('/create', methods=['GET', 'POST'])
def create_paste():
	if request.method == 'POST':
		# Aqu√≠ ir√° la l√≥gica para crear el paste
		flash('Paste creado (demo)', 'success')
		return redirect(url_for('index'))
	return render_template('create.html')

@app.route('/view/<string:paste_url>')
def view_paste(paste_url):
	# Aqu√≠ ir√° la l√≥gica para cargar y mostrar el paste
	return render_template('view.html', paste={})

@app.route('/edit/<string:paste_url>', methods=['GET', 'POST'])
def edit_paste(paste_url):
	# Aqu√≠ ir√° la l√≥gica para editar el paste
	return render_template('edit.html', paste={})

@app.route('/dashboard', methods=['GET', 'POST'])
def dashboard():
	# Aqu√≠ ir√° la l√≥gica para mostrar el dashboard
	return render_template('dashboard.html', pastes=[])

# --- FIN DE PARTYBIN ---
# Arranque local
if __name__ == "__main__":
	app.run(debug=True, host="0.0.0.0", port=5000)

